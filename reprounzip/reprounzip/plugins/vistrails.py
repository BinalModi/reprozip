# Copyright (C) 2014 New York University
# This file is part of ReproZip which is released under the Revised BSD License
# See file LICENSE for full license details.

"""VisTrails runner for reprounzip.

This file provides the --vistrails option that builds a VisTrails pipeline
alongside an unpacked experiment. Although you don't need it to generate the
.vt file, you will need VisTrails if you want to run it.

See http://www.vistrails.org/
"""

from __future__ import unicode_literals

from datetime import datetime
import logging
import zipfile
from rpaths import Path
import sys
from reprounzip import signals

from reprounzip.main import __version__ as version
from reprounzip.utils import escape


def do_vistrails(target):
    """Create a VisTrails workflow that runs the experiment.
    """
    unpacker = signals.unpacker
    dot_vistrails = Path('~/.vistrails').expand_user()

    # Writes CLTools JSON definition
    cltools_module = (dot_vistrails / 'CLTools' /
                      ('reprounzip_%s.clt' % unpacker))
    logging.info("Writing CLTools definition %s..." % cltools_module)
    with cltools_module.open('w', encoding='utf-8', newline='\n') as fp:
        fp.write("# ReproUnzip module for {unpacker}\n"
                 "# This file was generated by reprounzip {version} at "
                 "{date}\n\n{{\n".format(
                     unpacker=unpacker,
                     version=version,
                     date=datetime.now().isoformat()))
        # python -m reprounzip.plugins.vistrails
        fp.write('{\n'
                 '    "command": "%s",\n'
                 '    "args": [\n'
                 '        [\n'
                 '            "constant",\n'
                 '            "-m",\n'
                 '            "flag",\n'
                 '            {}\n'
                 '        ],\n'
                 '        [\n'
                 '            "constant",\n'
                 '            "reprounzip.plugins.vistrails",\n'
                 '            "flag",\n'
                 '            {}\n'
                 '        ],\n' % escape(sys.executable))
        # Unpacker
        fp.write('        [\n'
                 '            "constant",\n'
                 '            "%s",\n'
                 '            "flag",\n'
                 '            {}\n'
                 '        ],\n' % unpacker)
        # Target directory
        fp.write('        [\n'
                 '            "input",\n'
                 '            "setup_directory",\n'
                 '            "directory",\n'
                 '            {}\n'
                 '        ]\n')

        # TODO : input and output files!?

        fp.write('    ],\n'
                 '    "stdout": [\n'
                 '        "stdout",\n'
                 '        "file",\n'
                 '        {}\n'
                 '    ]\n'
                 '}\n')

    # Writes VisTrails workflow
    vistrail = target / 'vistrails.vt'
    logging.info("Writing VisTrails workflow %s..." % vistrail)
    vtdir = Path.tempdir(prefix='reprounzip_vistrails_')
    try:
        with vtdir.open('w', 'vistrail', encoding='utf-8', newline='\n') as fp:
            fp.write('todo\n%s\n' % cltools_module)
            # TODO : write XML vistrail

        with vistrail.open('wb') as fp:
            z = zipfile.ZipFile(fp, 'w')
            with vtdir.in_dir():
                for path in Path('.').recursedir():
                    z.write(str(path))
            z.close()
    finally:
        vtdir.rmtree()


def setup_vistrails():
    """Setup the plugin.
    """
    signals.post_setup.subscribe(do_vistrails)
